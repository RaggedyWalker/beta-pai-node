generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Stock {
  stockCode String  @id @map("stock_code") @db.VarChar(10)
  stockName String  @map("stock_name") @db.VarChar(20)
  market    String? @map("market") @db.VarChar(6)

  @@index([stockCode, market])
  @@map("all_stocks")
}

model StockPredict {
  id              Int       @id @default(autoincrement())
  stockCode       String    @map("stock_code") @db.VarChar(20)
  stockName       String?   @map("stock_name") @db.VarChar(20)
  comment         String?   @db.VarChar(200)
  createTime      DateTime? @default(now()) @map("create_time")
  confidenceGrade Int?      @map("confidence_grade") @db.TinyInt
  predictTrend    Int?      @map("predict_trend") @db.TinyInt
  goalPrice       Decimal   @map("goal_price") @db.Decimal(8, 2)
  userName        String?   @map("user_name") @db.VarChar(20)
  status          Boolean   @default(true)

  @@map("stock_predict")
}

model StockDayLine {
  id        Int      @id @default(autoincrement())
  code      String   @db.VarChar(10)
  high      Decimal  @db.Decimal(8, 2)
  low       Decimal  @db.Decimal(8, 2)
  open      Decimal  @db.Decimal(8, 2)
  close     Decimal  @db.Decimal(8, 2)
  volume    BigInt   @db.BigInt
  amount    Decimal  @db.Decimal(16, 2)
  timestamp DateTime @map("time") @db.Date
  unit      String   @default("å…ƒ") @db.VarChar(4)
  growthPct Float    @map("growth_pct") @db.Float
  ampPct    Float?    @map("amp_pct") @db.Float

  @@index([code])
  @@map("stock_day_line")
}

model StockUpdateStatus {
  code       String   @id @db.VarChar(10)
  updateTime DateTime @map("update_time") @db.Date

  @@map("stock_update_status")
}

model StockTrainRecord {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @default("") @db.VarChar(10)
  code                   String                   @db.VarChar(10)
  startDate              DateTime                 @map("start_date") @db.Date
  period                 Int                      @db.SmallInt
  blind                  Boolean                  @default(false)
  userId                 Int                      @map("user_id")
  user                   User                     @relation(fields: [userId], references: [id])
  finished               Boolean                  @default(false)
  createDate             DateTime                 @default(now()) @map("create_date")
  StockTrainTransactions StockTrainTransactions[]
  endingGrowthPct        Float?                   @map("ending_growth_pct") @db.Float

  @@index([code])
  @@map("stock_train_record")
}

model StockTrainTransactions {
  id          Int              @id @default(autoincrement())
  date        DateTime         @db.Date
  price       Float            @db.Float
  amount      Int              @db.Int
  direction   Int              @db.SmallInt
  recordId    Int              @map("record_id")
  trainRecord StockTrainRecord @relation(fields: [recordId], references: [id])

  @@index([id])
  @@map("stock_train_transactions")
}

model User {
  id       Int     @id @default(autoincrement())
  userName String  @db.VarChar(20)
  password String  @db.VarChar(32)
  email    String? @db.VarChar(32)
  phone    String? @db.VarChar(16)
  role     Int     @default(1) @db.TinyInt

  stockTrainRecords StockTrainRecord[]

  @@map("user_info")
}

model AccountApplication {
  id          Int         @id @default(autoincrement())
  userName    String      @db.VarChar(20)
  origin      String      @db.VarChar(32)
  email       String?     @db.VarChar(32)
  phone       String?     @db.VarChar(16)
  reason      String?     @db.VarChar(20)
  inviteKey   String?     @map("invite_key") @db.VarChar(20)
  createDate  DateTime?   @default(now()) @map("create_date")
  applyStatus ApplyStatus @default(PENDING) @map("apply_status")

  @@map("account_application")
}

enum ApplyStatus {
  PENDING
  RESOLVE
  REJECT
}
